<krpano>

	                                                                                   
	<plugin name="WebVR" devices="html5" keep="true"
	        url="webvr.js"
	        onloaded="copy(webvr, plugin[WebVR]);"
	        mousespeed="0.00125"
	        multireslock="true"
	        mobilevr_support="true"
	        mobilevr_ipd="63.5"
	        mobilevr_screensize="auto"
	        mobilevr_lens_overlap="1.0"
	        mobilevr_lens_fov="96"
	        mobilevr_lens_dist="0.6"
	        mobilevr_lens_dist2="1|0|0|0"
	        mobilevr_lens_ca="0.0"
	        mobilevr_lens_vign="100"
	        mobilevr_webvr_dist="true"
	        mobilevr_wakelock="true"
	        mobilevr_sensor_mode="3"
	        mobilevr_autocalibration="true"
	        mobilevr_touch_support="true"
	        mobilevr_fake_support="true"
	        vr_cursor="hotspot[vr_cursor]"
	        vr_cursor_enabled="true"
	        vr_cursor_onover="if(handcursor, tween(hotspot[vr_cursor].scale,0.4,0.1); vr_auto_click(get(vr_timeout)); );"
	        vr_cursor_onout="tween(hotspot[vr_cursor].scale,0.3,0.1);"
	        onavailable="webvr_onavailable();"
	        onunavailable=""
	        onunknowndevice="set(ask_user_for_screensize,true);"
	        onentervr="webvr_onentervr();"
	        onexitvr="webvr_onexitvr();"
	        />

	
	                                                                   
	<vrheadsets>
		<headset name="cb1" caption="Cardboard A"   overlap="1.10" fov="96.0"  dist="1.00" dist2="1|0|0|0" ca="0.000" vig="100" />
		<headset name="cb2" caption="Cardboard B"   overlap="1.00" fov="96.0"  dist="0.60" dist2="1|0|0|0" ca="0.000" vig="100" />
		<headset name="gvr" caption="GearVR"        overlap="1.00" fov="112.0" dist="0.95" dist2="1|0|0|0" ca="0.090" vig="100" />
		<headset name="hom" caption="HOMiDO"        overlap="1.00" fov="101.0" dist="1.10" dist2="1|0|0|0" ca="0.075" vig="100" />
		<headset name="one" caption="VR ONE"        overlap="1.00" fov="109.9" dist="0.00" dist2="1.139|0.093|0.018|0.207" ca="0.090" vig="35" />
		<headset name="ccr" caption="ColorCross VR" overlap="1.00" fov="70.0"  dist="0.65" dist2="1|0|0|0" ca="0.000" vig="100" />
		<headset name="nod" caption="No Distortion" overlap="1.00" fov="96.0"  dist="0.00" dist2="1|0|0|0" ca="0.000" vig="100" />
	</vrheadsets>


	                              
	<hotspot name="vr_cursor" keep="true"
	         url="%SWFPATH%/images/webvr_cursor_80x80_17f.png"
	         visible="false"
	         enabled="false"
	         distorted="true"
	         crop="0|0|80|80"
	         scale="0.3"
	         depth="1000"
	         />


	                                                                                                                                      
	<action name="vr_auto_click">
		if(webvr.isenabled,
			if(%1 != null, set(vr_aclk_timeout, %1), set(vr_aclk_timeout, 2000));
			copy(vr_aclk_t1, timertick);
			set(vr_aclk_waiting, true);
			set(hotspot[vr_cursor].crop,'0|0|80|80');

			asyncloop(vr_aclk_waiting,
				sub(dt, timertick,vr_aclk_t1);

				if(!hovering,
					set(vr_aclk_waiting, false);
					set(hotspot[vr_cursor].crop,'0|0|80|80');
				  ,
					div(f, dt, vr_aclk_timeout);
					mul(f, 16);
					roundval(f);
					Math.min(f, 16);
					mul(f, 80);

					txtadd(hotspot[vr_cursor].crop,get(f),'|0|80|80');

					                                                                                      
					sub(dt, 100);
					if(dt GT vr_aclk_timeout,
						set(vr_aclk_waiting,false);
						set(hotspot[vr_cursor].crop,'0|0|80|80');
						                     
						onclick();
					  );
				  );
				);
		  );
	</action>


	                                                               
	<events name="webvr_events" devices="html5" keep="true"
	        onkeydown="if(keycode==32, webvr.resetSensor(0) );"
	        onmousedown="if(webvr AND webvr.isenabled, webvr_showbuttons() );"
	        />


	                                                               
	<action name="webvr_onavailable">
		webvr.loadsettings();
		delayedcall(0.5, tween(layer[webvr_enterbutton].alpha,1.0); );
	</action>


	<action name="webvr_onentervr">
		tween(layer[webvr_enterbutton].alpha,0,0);

		webvr_showbuttons();
		webvr_hide_all_non_vr_layers();

		                                                                                                                
		if(webvr.ismobilevr == true AND !webvr.isfake AND ask_user_for_screensize == true AND webvr.mobilevr_screensize == 'auto',
			set(ask_user_for_screensize, false);
			vr_setup();
		  );
		if(webvr.isfake,
			webvr_show_fakemode_info(true);
		  );
	</action>


	<action name="webvr_onexitvr">
		stopdelayedcall(vr_button_fadeout);

		tween(layer[webvr_enterbutton].alpha,1);
		tween(layer[webvr_exitbutton].alpha,0);
		tween(layer[webvr_setupbutton].alpha,0);
		
		webvr_show_fakemode_info(false);

		webvr_restore_layers();
		hidehotspot_enterVR();
	</action>


	<action name="webvr_hide_all_non_vr_layers">
		for(set(i,0), i LT layer.count, inc(i),
			copy(lr, layer[get(i)]);
			if(lr.vr !== true,
				copy(lr.vr_backup_visible, lr.visible);
				set(lr.visible, false);
			  );
		  );
	</action>

	<action name="webvr_restore_layers">
		for(set(i,0), i LT layer.count, inc(i),
			copy(lr, layer[get(i)]);
			if(lr.vr_backup_visible,
				copy(lr.visible, lr.vr_backup_visible);
				delete(lr.vr_backup_visible);
			  );
		  );
	</action>
	
	<action name="webvr_show_fakemode_info">
		
	</action>
	
	
	                                                                                     
	<krpano webvr_setup_scale="calc:(1.0 + 1.0*(device.mobile AND stagescale LT 1.0)) / (1.0 + 1.0*device.mobile)"
	        webvr_button_scale.normal="1.0"
	        webvr_button_scale.mobile="1.6"
	        />

	
	                                               
	<style name="webvr_button_style"
	       url="%SWFPATH%/plugins/textfield.swf"
	       backgroundcolor="0x000000"
	       backgroundalpha="0.5"
	       roundedge="calc:9*webvr_setup_scale*webvr_button_scale"
	       css="calc:'color:#FFFFFF;font-size:' + 20*webvr_setup_scale*webvr_button_scale + 'px;'"
	       padding="calc:6*webvr_setup_scale*webvr_button_scale + ' ' + 10*webvr_setup_scale*webvr_button_scale"
	       />
	
	<layer name="webvr_enterbutton" keep="true" vr="true"
	       style="webvr_button_style"
	       html="Enter VR"
	       align="top" y="24"
	       autoalpha="true" alpha="0.0"
	       onclick="webvr.enterVR();"
	       />

	<layer name="webvr_exitbutton" keep="true" vr="true"
	       style="webvr_button_style"
	       html="退出VR"
	       align="top" y="24"
	       autoalpha="true" alpha="0.0"
	       onclick="webvr.exitVR();"
	       />

	<layer name="webvr_setupbutton" keep="true" vr="true"
	       style="webvr_button_style"
	       html="VR 设置"
	       align="bottom" y="24"
	       autoalpha="true" alpha="0.0"
	       onclick="vr_setup()"
	       />


	<action name="webvr_showbuttons">
		stopdelayedcall(vr_button_fadeout);
		if(webvr.ismobilevr,
			tween(layer[webvr_exitbutton].alpha|layer[webvr_setupbutton].alpha, 1.0|1.0, 0.25);
			delayedcall(vr_button_fadeout, 3.0, tween(layer[webvr_exitbutton].alpha|layer[webvr_setupbutton].alpha, 0.0|0.0, 1.0); );
		  ,
			tween(layer[webvr_exitbutton].alpha, 1.0, 0.25);
			delayedcall(vr_button_fadeout, 3.0, tween(layer[webvr_exitbutton].alpha, 0.0, 1.0); );
		  );
	</action>



	                      

	<action name="vr_setup">
		                       
		set(webvr.vr_cursor_enabled, false);
		
		                        
		tween(layer[webvr_exitbutton].alpha,0);
		tween(layer[webvr_setupbutton].alpha,0);
		
		                                
		addlayer(vr_setup_bg);
		set(layer[vr_setup_bg].type, container);
		set(layer[vr_setup_bg].bgcolor, 0x000000);
		set(layer[vr_setup_bg].bgalpha, 0.5);
		set(layer[vr_setup_bg].bgcapture, true);
		set(layer[vr_setup_bg].handcursor, false);
		set(layer[vr_setup_bg].align, lefttop);
		set(layer[vr_setup_bg].width, 100%);
		set(layer[vr_setup_bg].height, 100%);
		set(layer[vr_setup_bg].zorder, 99999);
		
		                                                  
		copy(i_screensize, webvr.mobilevr_screensize);
		if(i_screensize == 'auto', copy(i_screensize, webvr.devicesize));
		if(i_screensize LE 0, set(i_screensize, 5.0));
		roundval(i_screensize, 1);
		txtadd(i_screensize, ' 英寸');

		copy(i_ipd, webvr.mobilevr_ipd);
		roundval(i_ipd, 1);
		txtadd(i_ipd, ' 毫米');

		copy(i_fov, webvr.mobilevr_lens_fov);
		roundval(i_fov, 1);

		copy(i_dist, webvr.mobilevr_lens_dist);
		roundval(i_dist, 2);
		
		copy(i_dist2, webvr.mobilevr_lens_dist2);
		txtsplit(i_dist2, '|', i_dist2_k1, i_dist2_k2, i_dist2_k3, i_dist2_k4);
		mul(i_dist2_k1,1);
		mul(i_dist2_k2,10);
		mul(i_dist2_k3,10);
		mul(i_dist2_k4,10);
		roundval(i_dist2_k1,2);
		roundval(i_dist2_k2,2);
		roundval(i_dist2_k3,2);
		roundval(i_dist2_k4,2);

		copy(i_vig, webvr.mobilevr_lens_vign);
		roundval(i_vig, 0);
		
		copy(i_overlap, webvr.mobilevr_lens_overlap);
		roundval(i_overlap, 2);
		
		copy(i_ca, webvr.mobilevr_lens_ca);
		roundval(i_ca, 3);

		set(i_headset, 'Custom');
		for(set(i,0), i LT vrheadsets.headset.count, inc(i),
			copy(hs, vrheadsets.headset[get(i)]);
			if(i_overlap == hs.overlap AND i_fov == hs.fov AND i_dist == hs.dist AND i_dist2 == hs.dist2 AND i_ca == hs.ca AND i_vig == hs.vig , copy(i_headset, hs.caption));
		   );

		                                                     
		set(known_size, true);
		set(sizcol, #FFFFFF);
		copy(i_devicename, webvr.devicename);
		if(i_devicename == 'Unknown',
			set(i_devicename, '未知设备');
			if(webvr.mobilevr_screensize == 'auto',
				set(sizcol, #AA0000);
				set(known_size, false);
			  ,
				set(i_devicename, '自定义');
			  );
		  );

		
		                                       
		addlayer(vr_setup_m1);
		set(layer[vr_setup_m1].type, container);
		set(layer[vr_setup_m1].parent, vr_setup_bg);
		set(layer[vr_setup_m1].align, lefttop);
		set(layer[vr_setup_m1].width, 100%);
		set(layer[vr_setup_m1].height, 100%);
		
		                                                        
		addlayer(vr_setup_m3);
		set(layer[vr_setup_m3].type, container);
		set(layer[vr_setup_m3].parent, vr_setup_bg);
		set(layer[vr_setup_m3].align, lefttop);
		set(layer[vr_setup_m3].width, 100%);
		set(layer[vr_setup_m3].height, 100%);
		set(layer[vr_setup_m3].visible, false);
		
		                                              
		addlayer(vr_setup_m2);
		set(layer[vr_setup_m2].type, container);
		set(layer[vr_setup_m2].parent, vr_setup_bg);
		set(layer[vr_setup_m2].align, lefttop);
		set(layer[vr_setup_m2].width, 100%);
		set(layer[vr_setup_m2].height, 100%);
		set(layer[vr_setup_m2].visible, false);
		
		                                 
		set(vr_setup_text_parent, 'vr_setup_m1');
		vr_setup_createtext(vr_setup_title, 'VR设置',       center, center, 0, -225, #FFFFFF,     false);

		vr_setup_createtext(vr_setup_dvn1, '设备:',         center, right,  0, -145, #FFFFFF,     true, vr_setup_select('screen') );
		vr_setup_createtext(vr_setup_dvn2, get(i_devicename), center, left,   0, -145, get(sizcol), true, vr_setup_select('screen') );
		vr_setup_createtext(vr_setup_siz1, '屏幕尺寸:',     center, right,  0, -90, #FFFFFF,     true, vr_setup_select('screen') );
		vr_setup_createtext(vr_setup_siz2, get(i_screensize), center, left,   0, -90, get(sizcol), true, vr_setup_select('screen') );

		vr_setup_createtext(vr_setup_ipd1, '瞳间距离:',            center, right,  0,  -35, #FFFFFF,     true, vr_setup_select('ipd') );
		vr_setup_createtext(vr_setup_ipd2, get(i_ipd),        center, left,   0,  -35, #FFFFFF,     true, vr_setup_select('ipd') );

		vr_setup_createtext(vr_setup_hmd1, 'VR设备:',     center, right,  0,  +20, #FFFFFF,     true, vr_setup_select('headset') );
		vr_setup_createtext(vr_setup_hmd2, get(i_headset),    center, left,   0,  +20, #FFFFFF,     true, vr_setup_select('headset') );
		
		vr_setup_createtext(vr_setup_hmd3, 'VR设备自定义',       center, center, 0,  +75, #FFFFFF,     true, set(background,true), set(background,false), vr_setup_customize_headset() );

		

		if(webvr.iswebvr == false,
			vr_setup_createtext(vr_setup_cal, '陀螺仪校准',   center, center,    0, +135, #FFFFFF,     true, set(background,true), set(background,false), vr_setup_calibration() );
		  );

		vr_setup_createtext(vr_setup_sav, '保存',          center, center, -200, +225, #FFFFFF,     true, set(background,true), set(background,false), vr_setup_save() );
		vr_setup_createtext(vr_setup_rst, '恢复默认值',         center, center,    0, +225, #FFFFFF,     true, set(background,true), set(background,false), vr_setup_reset() );
		vr_setup_createtext(vr_setup_cls, '关闭',         center, center, +200, +225, #FFFFFF,     true, set(background,true), set(background,false), vr_setup_close() );
		
		                                  
		vr_setup_createbutton(vr_setup_btn1, '&#60;', left,  left,  5%, -35, #FFFFFF, true, null);
		vr_setup_createbutton(vr_setup_btn2, '&#62;', right, right, 5%, -35, #FFFFFF, true, null);
		
		
		                                                   
		set(vr_setup_text_parent, 'vr_setup_m3');
		vr_setup_createtext(vr_setup_m31, 'VR HEADSET', center, center, 0, -225, #FFFFFF, false);
		
		vr_setup_createtext(vr_setup_fov1,  '视角宽度:',           center, right,  0,  -80,  #FFFFFF,    true, vr_setup_select('fov') );
		vr_setup_createtext(vr_setup_fov2, get(i_fov),        center, left,   0,  -80,  #FFFFFF,    true, vr_setup_select('fov') );
		vr_setup_createtext(vr_setup_dst1, '形变强度:',     center, right,  0,  -32,  #FFFFFF,    true, vr_setup_select('dist') );
		vr_setup_createtext(vr_setup_dst2, get(i_dist),       center, left,   0,  -32,  #FFFFFF,    true, vr_setup_select('dist') );
		vr_setup_createtext(vr_setup_d2tx, '形变强度微调:',          center, right,  0,  +16,  #FFFFFF,    true, vr_setup_select('dist2k1') );
		vr_setup_createtext(vr_setup_d2k1, get(i_dist2_k1),   center, left,   0,  +16,  #FFFFFF,    true, vr_setup_select('dist2k1') );
		vr_setup_createtext(vr_setup_d2k2, get(i_dist2_k2),   center, left, +100, +16,  #FFFFFF,    true, vr_setup_select('dist2k2') );
		vr_setup_createtext(vr_setup_d2k3, get(i_dist2_k3),   center, left, +200, +16,  #FFFFFF,    true, vr_setup_select('dist2k3') );
		vr_setup_createtext(vr_setup_d2k4, get(i_dist2_k4),   center, left, +300, +16,  #FFFFFF,    true, vr_setup_select('dist2k4') );
		
		
		vr_setup_createtext(vr_setup_cac1, '相差校准:',        center, right,  0,  +64,  #FFFFFF,    true, vr_setup_select('ca') );
		vr_setup_createtext(vr_setup_cac2, get(i_ca),         center, left,   0,  +64,  #FFFFFF,    true, vr_setup_select('ca') );
		vr_setup_createtext(vr_setup_vig1, '装饰边框:',       center, right,  0, +112,  #FFFFFF,    true, vr_setup_select('vignette') );
		vr_setup_createtext(vr_setup_vig2, get(i_vig),        center, left,   0, +112,  #FFFFFF,    true, vr_setup_select('vignette') );
		vr_setup_createtext(vr_setup_olp1, '重叠:',        center, right,  0, +160,  #FFFFFF,    true, vr_setup_select('overlap') );
		vr_setup_createtext(vr_setup_olp2, get(i_overlap),    center, left,   0, +160,  #FFFFFF,    true, vr_setup_select('overlap') );
				
		vr_setup_createtext(vr_setup_m35, '关闭',       center, center, 0, +225, #FFFFFF, true, set(background,true), set(background,false), vr_setup_close_sub_menus() );
		
		
		                                             
		set(vr_setup_text_parent, 'vr_setup_m2');
		vr_setup_createtext(vr_setup_cb1, '陀螺仪校准', center, center, 0, -225, #FFFFFF, false);
		vr_setup_createtext(vr_setup_cb2, '请把设备水平放置[br]点击校准按钮[br]进行陀螺仪校准.', center, center, 0, -95, #FFFFFF, false, vr_setup_select('screen') );
		vr_setup_createtext(vr_setup_cb3, '校准',   center, center, 0,  +55, #FFFFFF, true, set(background,true), set(background,false), vr_setup_do_calibration() );
		vr_setup_createtext(vr_setup_cb4, '重置',       center, center, 0, +125, #FFFFFF, true, set(background,true), set(background,false), webvr.resetcalibration() );
		vr_setup_createtext(vr_setup_cb5, '关闭',       center, center, 0, +225, #FFFFFF, true, set(background,true), set(background,false), vr_setup_close_sub_menus() );
		
		vr_setup_createtext(vr_setup_cb6, '校准中...',      bottom, center, 0, 40, #FFFFFF, false, null );
		vr_setup_createtext(vr_setup_cb7, '校准完成.',   bottom, center, 0, 40, #FFFFFF, false, null );
		vr_setup_createtext(vr_setup_cb8, '校准失败!', bottom, center, 0, 40, #FFFFFF, false, null );
		set(layer[vr_setup_cb6].autoalpha, true);
		set(layer[vr_setup_cb7].autoalpha, true);
		set(layer[vr_setup_cb8].autoalpha, true);
		set(layer[vr_setup_cb6].alpha, 0.0);
		set(layer[vr_setup_cb7].alpha, 0.0);
		set(layer[vr_setup_cb8].alpha, 0.0);
		
		
		                                                                                       
		if(known_size == false,
			vr_setup_select('screen', true);
		  ,
			vr_setup_select('ipd', true);
		  );
	</action>


	<action name="vr_setup_createtext">
		                                                                                                                                                                           
		addlayer(%1);
		set(layer[%1].parent, get(vr_setup_text_parent));
		set(layer[%1].url, '%SWFPATH%/plugins/textfield.swf');
		set(layer[%1].css, calc('text-align:%3;color:%7;font-size:'+30*webvr_setup_scale+'px;font-weight:bold;'));
		set(layer[%1].padding, calc(0 + ' ' + 8*webvr_setup_scale));
		set(layer[%1].roundedge, calc(8*webvr_setup_scale));
		set(layer[%1].background, false);
		set(layer[%1].backgroundcolor, 0xFFFFFF);
		set(layer[%1].backgroundalpha, 0.25);
		set(layer[%1].align, %3);
		set(layer[%1].edge, %4);
		set(layer[%1].x, calc(%5 * webvr_setup_scale));
		set(layer[%1].y, calc(%6 * webvr_setup_scale));
		set(layer[%1].html, %2);
		set(layer[%1].enabled, %8);
		set(layer[%1].ondown, %9);
		set(layer[%1].onup, %10);
		set(layer[%1].onclick, %11);
	</action>


	<action name="vr_setup_createbutton">
		vr_setup_createtext(%1,%2,%3,%4,%5,%6,%7,%8,%9);
		set(layer[%1].css, calc('vertical-align:middle;text-align:center;color:%7;font-size:'+60*webvr_setup_scale+'px;font-weight:bold;'));
		set(layer[%1].background, true);
		set(layer[%1].padding, 0);
		set(layer[%1].roundedge, calc(40 * webvr_setup_scale));
		set(layer[%1].width, calc(70 * webvr_setup_scale));
		set(layer[%1].height, calc(70 * webvr_setup_scale));
		set(layer[%1].vcenter, true);
	</action>


	<action name="vr_setup_reset">
		                              
		set(webvr.mobilevr_screensize, 'auto');
		copy(i_screensize, webvr.devicesize);
		if(i_screensize LE 0, set(i_screensize, 5.0));
		roundval(i_screensize, 1);
		set(layer[vr_setup_dvn2].html, get(webvr.devicename));
		txtadd(layer[vr_setup_siz2].html, get(i_screensize), ' 英寸');

		set(webvr.mobilevr_ipd, 63.5);
		copy(i_ipd, webvr.mobilevr_ipd);
		roundval(i_ipd, 1);
		txtadd(layer[vr_setup_ipd2].html, get(i_ipd), ' mm');

		                                                                                                            
		set(webvr.mobilevr_lens_fov, 100);
		set(webvr.mobilevr_lens_dist, 0.5);
		set(webvr.mobilevr_lens_vign, 100);
		set(webvr.mobilevr_lens_overlap, 1.0);
		set(webvr.mobilevr_lens_ca, 0.0);
		vr_setup_change_headset(+1);

		vr_setup_select(get(selected_var));
	</action>


	<action name="vr_setup_close">
		                                                             
		removelayer(vr_setup_bg, true);
		
		                      
		set(webvr.vr_cursor_enabled, true);
	</action>


	<action name="vr_setup_save">
		webvr.saveSettings();
		vr_setup_close();
	</action>
	
	
	<action name="vr_setup_customize_headset">
		set(layer[vr_setup_bg].bgalpha, 0.1);
		
		set(layer[vr_setup_m1].visible,false);
		set(layer[vr_setup_m2].visible,false);
		set(layer[vr_setup_m3].visible,true);
		
		set(layer[vr_setup_hmd1].parent, vr_setup_m3);
		set(layer[vr_setup_hmd2].parent, vr_setup_m3);
		set(layer[vr_setup_btn1].parent, vr_setup_m3);
		set(layer[vr_setup_btn2].parent, vr_setup_m3);
		
		set(layer[vr_setup_hmd1].y, calc(-145 * webvr_setup_scale));
		set(layer[vr_setup_hmd2].y, calc(-145 * webvr_setup_scale));
		
		copy(old_selection, selected_var);
		vr_setup_select('headset');
	</action>
	
	

	<action name="vr_setup_calibration">
		set(layer[vr_setup_m1].visible,false);
		set(layer[vr_setup_m2].visible,true);
	</action>
	
	<action name="vr_setup_close_sub_menus">
		set(layer[vr_setup_bg].bgalpha, 0.5);
		
		set(layer[vr_setup_m1].visible,true);
		set(layer[vr_setup_m2].visible,false);
		set(layer[vr_setup_m3].visible,false);
		
		set(layer[vr_setup_hmd1].parent, vr_setup_m1);
		set(layer[vr_setup_hmd2].parent, vr_setup_m1);
		set(layer[vr_setup_btn1].parent, vr_setup_m1);
		set(layer[vr_setup_btn2].parent, vr_setup_m1);
		
		set(layer[vr_setup_hmd1].y, calc(+35 * webvr_setup_scale));
		set(layer[vr_setup_hmd2].y, calc(+35 * webvr_setup_scale));
		
		if(old_selection,
			vr_setup_select(get(old_selection));
			delete(old_selection);
		  );
	</action>
	
	<action name="vr_setup_do_calibration">
		if(!webvr.isfake,
			tween(layer[vr_setup_cb6].alpha, 1.0, 0.1);
			tween(layer[vr_setup_cb7].alpha, 0.0, 0.1);
			tween(layer[vr_setup_cb8].alpha, 0.0, 0.1);
			webvr.calibrate(
				tween(layer[vr_setup_cb6].alpha, 0.0, 0.1);
				tween(layer[vr_setup_cb7].alpha, 1.0, 0.1);
				delayedcall(2.0, tween(layer[vr_setup_cb7].alpha, 0.0, 0.25) );
			  ,
				tween(layer[vr_setup_cb6].alpha, 0.0, 0.1);
				tween(layer[vr_setup_cb8].alpha, 1.0, 0.1);
				delayedcall(2.0, tween(layer[vr_setup_cb8].alpha, 0.0, 0.25) );
			  );
		  );
	</action>

	<action name="vr_setup_update_dist2">
		txtadd(webvr.mobilevr_lens_dist2, get(i_dist2_k1), '|', calc(i_dist2_k2/10.0), '|', calc(i_dist2_k3/10.0), '|', calc(i_dist2_k4/10.0));
		vr_setup_change_headset(0);
	</action>

	<action name="vr_setup_select">
		                                       
		set(layer[vr_setup_siz2].background, false);
		set(layer[vr_setup_ipd2].background, false);
		set(layer[vr_setup_hmd2].background, false);
		set(layer[vr_setup_fov2].background, false);
		set(layer[vr_setup_dst2].background, false);
		set(layer[vr_setup_d2k1].background, false);
		set(layer[vr_setup_d2k2].background, false);
		set(layer[vr_setup_d2k3].background, false);
		set(layer[vr_setup_d2k4].background, false);
		set(layer[vr_setup_vig2].background, false);
		set(layer[vr_setup_cac2].background, false);
		set(layer[vr_setup_olp2].background, false);

		set(selected_setting, null);
		delete(selected_var_value);

		set(layer[vr_setup_btn1].ondown, vr_setup_change_ondown(-1) );
		set(layer[vr_setup_btn2].ondown, vr_setup_change_ondown(+1) );
		set(selected_var_callback, null);

		set(selected_var, %1);

		if(selected_var == 'screen',
			set(selected_setting,      vr_setup_siz2);
			set(selected_var_name,     'webvr.mobilevr_screensize');
			set(selected_var_postfix,  ' inch');
			copy(selected_var_value,   get(selected_var_name));
			if(selected_var_value == 'auto', copy(selected_var_value, webvr.devicesize));
			if(selected_var_value LE 0, set(selected_var_value, 5.0));
			set(selected_var_step,     0.1);
			set(selected_var_min,      4);
			set(selected_var_max,      10);
			set(selected_var_round,    1);
			set(selected_var_callback, vr_setup_change_screen() );
		  );

		if(selected_var == 'ipd',
			set(selected_setting,      vr_setup_ipd2);
			set(selected_var_name,     'webvr.mobilevr_ipd');
			set(selected_var_postfix,  ' mm');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.1);
			set(selected_var_min,      40);
			set(selected_var_max,      80);
			set(selected_var_round,    1);
		  );

		if(selected_var == 'headset',
			set(selected_setting,      vr_setup_hmd2);
			set(layer[vr_setup_btn1].ondown, vr_setup_change_headset(-1) );
			set(layer[vr_setup_btn2].ondown, vr_setup_change_headset(+1) );
		  );

		if(selected_var == 'fov',
			set(selected_setting,      vr_setup_fov2);
			set(selected_var_name,     'webvr.mobilevr_lens_fov');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.1);
			set(selected_var_min,      40);
			set(selected_var_max,      179);
			set(selected_var_round,    1);
			set(selected_var_callback, vr_setup_change_headset(0) );
		  );

		if(selected_var == 'dist',
			set(selected_setting,      vr_setup_dst2);
			set(selected_var_name,     'webvr.mobilevr_lens_dist');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.01);
			set(selected_var_min,      0);
			set(selected_var_max,      5);
			set(selected_var_round,    2);
			set(selected_var_callback, vr_setup_change_headset(0) );
		  );
		
		if(selected_var == 'dist2k1',
			set(selected_setting,      vr_setup_d2k1);
			set(selected_var_name,     'i_dist2_k1');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.01);
			set(selected_var_min,      -9);
			set(selected_var_max,      +9);
			set(selected_var_round,    2);
			set(selected_var_callback, vr_setup_update_dist2() );
		  );
		
		if(selected_var == 'dist2k2',
			set(selected_setting,      vr_setup_d2k2);
			set(selected_var_name,     'i_dist2_k2');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.01);
			set(selected_var_min,      -9);
			set(selected_var_max,      +9);
			set(selected_var_round,    2);
			set(selected_var_callback, vr_setup_update_dist2() );
		  );
		
		if(selected_var == 'dist2k3',
			set(selected_setting,      vr_setup_d2k3);
			set(selected_var_name,     'i_dist2_k3');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.01);
			set(selected_var_min,      -9);
			set(selected_var_max,      +9);
			set(selected_var_round,    2);
			set(selected_var_callback, vr_setup_update_dist2() );
		  );

		if(selected_var == 'dist2k4',
			set(selected_setting,      vr_setup_d2k4);
			set(selected_var_name,     'i_dist2_k4');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.01);
			set(selected_var_min,      -9);
			set(selected_var_max,      +9);
			set(selected_var_round,    2);
			set(selected_var_callback, vr_setup_update_dist2() );
		  );

		if(selected_var == 'vignette',
			set(selected_setting,      vr_setup_vig2);
			set(selected_var_name,     'webvr.mobilevr_lens_vign');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     1);
			set(selected_var_min,      10);
			set(selected_var_max,      200);
			set(selected_var_round,    0);
			set(selected_var_callback, vr_setup_change_headset(0) );
		  );

		if(selected_var == 'ca',
			set(selected_setting,      vr_setup_cac2);
			set(selected_var_name,     'webvr.mobilevr_lens_ca');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.01);
			set(selected_var_min,      -1.0);
			set(selected_var_max,      +1.0);
			set(selected_var_round,    2);
			set(selected_var_callback, vr_setup_change_headset(0) );
		  );
		  
		if(selected_var == 'overlap',
			set(selected_setting,      vr_setup_olp2);
			set(selected_var_name,     'webvr.mobilevr_lens_overlap');
			set(selected_var_postfix,  '');
			copy(selected_var_value,   get(selected_var_name));
			set(selected_var_step,     0.01);
			set(selected_var_min,      0.5);
			set(selected_var_max,      2.0);
			set(selected_var_round,    2);
			set(selected_var_callback, vr_setup_change_headset(0) );
		  );

		if(selected_setting != null,
			set(layer[get(selected_setting)].background, true);
			if(%2 == true,
				set(layer[vr_setup_btn1].y, get(layer[get(selected_setting)].y));
				set(layer[vr_setup_btn2].y, get(layer[get(selected_setting)].y));
			  ,
				tween(layer[vr_setup_btn1].y, get(layer[get(selected_setting)].y));
				tween(layer[vr_setup_btn2].y, get(layer[get(selected_setting)].y));
			  );
		  );
	</action>


	<action name="vr_setup_change_screen">
		set(layer[vr_setup_dvn2].html, '自定义');
		set(layer[vr_setup_dvn2].css, calc('color:#FFFFFF;font-size:'+40*webvr_setup_scale+'px;font-weight:bold;'));
		set(layer[vr_setup_siz2].css, calc('color:#FFFFFF;font-size:'+40*webvr_setup_scale+'px;font-weight:bold;'));
	</action>


	<action name="vr_setup_change_ondown">
		copy(t0,timertick);
		set(t1,0);
		asyncloop(pressed,
			copy(t2,timertick);
			sub(dt,t2,t1);
			if(dt GT 100,
				copy(t1,t2);
				sub(dt,t1,t0);
				div(dt,1000);
				Math.max(dt,1);
				mul(dt,%1);
				vr_setup_adjust(get(dt));
			  );
		  );
	</action>


	<action name="vr_setup_adjust">
		if(selected_setting != null,
			mul(change, selected_var_step, %1);
			add(selected_var_value, change);
			Math.max(selected_var_value, selected_var_min);
			Math.min(selected_var_value, selected_var_max);
			roundval(selected_var_value, get(selected_var_round));
			tween(get(selected_var_name), get(selected_var_value), 0.1);
			txtadd(layer[get(selected_setting)].html, get(selected_var_value), get(selected_var_postfix));
			if(selected_var_callback != null, selected_var_callback());
		  );
	</action>


	<action name="vr_setup_change_headset">
		set(i_headset, 'Custom');
		if(%1 != 0,
			copy(i_fov, webvr.mobilevr_lens_fov);
			roundval(i_fov, 1);
			copy(i_dist, webvr.mobilevr_lens_dist);
			roundval(i_dist, 2);
			copy(i_dist2, webvr.mobilevr_lens_dist2);
			copy(i_vig, webvr.mobilevr_lens_vign);
			roundval(i_vig, 0);
			copy(i_ca, webvr.mobilevr_lens_ca);
			roundval(i_ca, 3);
			copy(i_overlap, webvr.mobilevr_lens_overlap);
			roundval(i_overlap, 2);
			set(i_hsindex, -1);
			copy(i_hscount, vrheadsets.headset.count);
			for(set(i,0), i LT i_hscount, inc(i),
				copy(hs, vrheadsets.headset[get(i)]);
				if(i_overlap == hs.overlap AND i_fov == hs.fov AND i_dist == hs.dist AND i_dist2 == hs.dist2 AND i_ca == hs.ca AND i_vig == hs.vig , copy(i_hsindex, i); copy(i_headset, hs.caption); );
			   );

			if(%1 GT 0,
				                   
				add(i_hsindex, 1);
				if(i_hsindex GE i_hscount, set(i_hsindex,0));
			  ,
				                  
				sub(i_hsindex, 1);
				if(i_hsindex LT 0, sub(i_hsindex,i_hscount,1));
			  );

			copy(hs, vrheadsets.headset[get(i_hsindex)]);
			copy(i_headset, hs.caption);
			copy(i_overlap, hs.overlap);
			copy(i_fov,     hs.fov);
			copy(i_dist,    hs.dist);
			copy(i_dist2,   hs.dist2);
			copy(i_ca,      hs.ca);
			copy(i_vig,     hs.vig);
		  );

		copy(layer[vr_setup_hmd2].html, i_headset);
		if(%1 != 0,
			copy(webvr.mobilevr_lens_overlap, i_overlap);
			copy(webvr.mobilevr_lens_fov, i_fov);
			copy(webvr.mobilevr_lens_dist, i_dist);
			copy(webvr.mobilevr_lens_dist2, i_dist2);
			copy(webvr.mobilevr_lens_ca, i_ca);
			copy(webvr.mobilevr_lens_vign, i_vig);
			copy(layer[vr_setup_olp2].html, i_overlap);
			copy(layer[vr_setup_fov2].html, i_fov);
			copy(layer[vr_setup_dst2].html, i_dist);
			
			txtsplit(i_dist2, '|', i_dist2_k1, i_dist2_k2, i_dist2_k3, i_dist2_k4);
			mul(i_dist2_k1,1);
			mul(i_dist2_k2,10);
			mul(i_dist2_k3,10);
			mul(i_dist2_k4,10);
			roundval(i_dist2_k1,2);
			roundval(i_dist2_k2,2);
			roundval(i_dist2_k3,2);
			roundval(i_dist2_k4,2);
			copy(layer[vr_setup_d2k1].html, i_dist2_k1);
			copy(layer[vr_setup_d2k2].html, i_dist2_k2);
			copy(layer[vr_setup_d2k3].html, i_dist2_k3);
			copy(layer[vr_setup_d2k4].html, i_dist2_k4);
			
			copy(layer[vr_setup_cac2].html, i_ca);
			copy(layer[vr_setup_vig2].html, i_vig);
		  );
	</action>


	                         

	                                                           
   <style name="vr_menu_style" depth="800" scale="0.2" distorted="true" ath="0" atv="45" alpha="0.45" visible="false" />
   <hotspot name="vr_menu_bg"   style="vr_menu_style" keep="true" zorder="5" url="../images/vr-back.png" width="600" height="120" onover="vr_menu_over();" onout="vr_menu_out();" handcursor="false" />
   <hotspot name="vr_menu_home" style="vr_menu_style" keep="true" zorder="6" url="../images/vr-text.png" crop="0|95|280|100" onover="vr_menu_over(); delayedcall(0,tween(alpha,0.75,0.1));" onout="vr_menu_out();" startupxml="" onloaded="copy(startupxml, xml.url);" vr_timeout="1000" onclick="if(vr_start_done == true,end_vr();,start_vr();)" />
   <hotspot name="vr_menu_l"    style="vr_menu_style" keep="true" zorder="6" url="../images/vr-text.png" crop="302|92|100|100" ox="-48" onover="vr_menu_over(); delayedcall(0,tween(alpha,0.75,0.1));" onout="vr_menu_out();" vr_timeout="700" onclick="nextscene_loop(-1);" />
   <hotspot name="vr_menu_r"    style="vr_menu_style" keep="true" zorder="6" url="../images/vr-text.png" crop="392|92|100|100" ox="+48" onover="vr_menu_over(); delayedcall(0,tween(alpha,0.75,0.1));" onout="vr_menu_out();" vr_timeout="700" onclick="nextscene_loop(+1);" />


   	<action name="vr_menu_over">
      callwith(hotspot[vr_menu_bg],   tween(alpha|depth,1.0|650); );
      callwith(hotspot[vr_menu_home], tween(alpha|depth,0.5|650); );
      callwith(hotspot[vr_menu_l],    tween(alpha|depth,0.5|650); );
      callwith(hotspot[vr_menu_r],    tween(alpha|depth,0.5|650); );
   </action>

   <action name="vr_menu_out">
      if(hotspot[vr_menu].hovering == false,
         callwith(hotspot[vr_menu_bg],   tween(alpha|depth,0.25|800); );
         callwith(hotspot[vr_menu_home], tween(alpha|depth,0.25|800); );
         callwith(hotspot[vr_menu_l],    tween(alpha|depth,0.25|800); );
         callwith(hotspot[vr_menu_r],    tween(alpha|depth,0.25|800); );
        );
   </action>

   <action name="vr_menu_setvisibility">
      
      set(hotspot[vr_menu_bg].visible,   %1);
      set(hotspot[vr_menu_home].visible, %1);
      if(scene.count GT 1,
         set(hotspot[vr_menu_bg].width, 600);
         set(hotspot[vr_menu_l].visible, %1);
         set(hotspot[vr_menu_r].visible, %1);
        ,
         set(hotspot[vr_menu_bg].width, 320);
         set(hotspot[vr_menu_l].visible, false);
         set(hotspot[vr_menu_r].visible, false);
        );
                                                      
   </action>
   
   
   <events name="vr_menu_events" keep="true" onviewchange="webvr_menu_following();ddd();" />
   <action name="ddd"></action>

                                                                                                    
   <action name="webvr_menu_following" type="Javascript" devices="html5"><![CDATA[

      var hs1 = krpano.get("hotspot[vr_menu_bg]");
      var hs2 = krpano.get("hotspot[vr_menu_home]");
      var hs3 = krpano.get("hotspot[vr_menu_l]");
      var hs4 = krpano.get("hotspot[vr_menu_r]");

      if(!hs1.hovering && !hs1.hovering && !hs1.hovering && !hs1.hovering)
      {
         var f = 0.01;  // follow speed factor

         var h = krpano.view.hlookat;
         var v = krpano.view.vlookat;
         var hsh = hs1.ath;
         var hsv = hs1.atv;

         // map to -180 to +180
         h   = (h  -(h|0))   + (((h|0)  +360180)%360) - 180.0;
         hsh = (hsh-(hsh|0)) + (((hsh|0)+360180)%360) - 180.0;

         // get the shortest horizontal distance
         dh = h - hsh;
         dh += (dh>180) ? -360 : (dh<-180) ? 360 : 0

         // follow slowing horizontally
         hsh += dh*f;

         // fade out when farther away
         var a = Math.abs(v - hs1.atv) / 90.0;
         a = 0.5 * Math.max(1.0 - 2.0*Math.sqrt(a), 0);

         // move up the more looking down
         v = v + 55.0 - v*1.5;
         hsv = hsv*(1-f) + v*f;

         // set everything
         hs2.alpha = hs1.alpha = a;
         if(!hs3.hovering) hs3.alpha = a;
         if(!hs4.hovering) hs4.alpha = a;
         hs4.ath = hs3.ath = hs2.ath = hs1.ath = hsh;
         hs4.atv = hs3.atv = hs2.atv = hs1.atv = hsv;
      }

   ]]></action>
   
   	                        
   	<action name="end_vr">
		set(start_ty, 75);
		set(start_tt, 1.5);

		for(set(i,0), i LT scene.count, inc(i),
			txtadd(hotspotname, "p", get(i));
			txtadd(hotspotthumb, get(hotspotname), "_thumb");
			txtadd(hotspottxt, get(hotspotname), "_txt");

			callwith(hotspot[get(hotspotname)],    tween(alpha|ty, 0|8000, get(start_tt), easeInQuint);  );
			callwith(hotspot[get(hotspotthumb)],   tween(alpha|ty, 0|8000, get(start_tt), easeInQuint, set(enabled,false) ); );
			callwith(hotspot[get(hotspottxt)],     tween(alpha|ty, 0|8000, get(start_tt), easeInQuint); );
		);  

		set(vr_start_done, false);
		delayedcall(get(start_tt), 
			if('%1' != 'null', %1);
			                                                                                                                                                                                      
		);

		
   	</action>
   
   	                        
   	<action name="start_vr">
      	set(start_ty, 10000);
      	set(start_tt, 2);
      	if(vr_start_done === true,
         	set(start_ty, 75);
         	set(start_tt, 0.5);
        ,
         	set(vr_start_done, true);
        );
      
		for(set(i,0), i LT scene.count, inc(i),
			txtadd(hotspotname, "p", get(i));
			txtadd(hotspotthumb, get(hotspotname), "_thumb");
			txtadd(hotspottxt, get(hotspotname), "_txt");
			mul(ath, get(i), 20);
			add(hotspot[get(hotspotname)].ath, ath, get(view.hlookat));
			add(hotspot[get(hotspotthumb)].ath, ath, get(view.hlookat));
			add(hotspot[get(hotspottxt)].ath, ath, get(view.hlookat));
			callwith(hotspot[get(hotspotname)],    copy(ty,start_ty); tween(alpha|ty, 0.5|75, get(start_tt), easeOutQuad|easeOutQuint); );
			callwith(hotspot[get(hotspotthumb)],   copy(ty,start_ty); tween(alpha|ty, 1.0|75, get(start_tt), easeOutQuad|easeOutQuint, set(enabled,true); ); );
			callwith(hotspot[get(hotspottxt)],     copy(ty,start_ty); tween(alpha|ty, 1.0|75, get(start_tt), easeOutQuad|easeOutQuint); set(enabled,true););
		);  
      
      	vr_menu_setvisibility(false);
      	delayedcall(get(start_tt), vr_menu_setvisibility(true); );

      	for(set(i,0), i LT hotspot.count, inc(i),
            if(hotspot[get(i)].isvr == true ,
                set(hotspot[get(i)].visible, false);
            );
        );
   	</action>

   	                           
   	<style name="vr_panel" keep="true" distorted="true" enabled="false" zorder="2" url="../images/vr-back.png" crop="0|0|260|260" depth="2000" width="260" height="260" alpha="0.0" ty="75"  />
   	<style name="vr_thumb" keep="true" distorted="true" enabled="false" capture="false" alpha="0" ty="75" depth="2000" onover="tween(depth,1980);" onout="tween(depth,2000);" />
   
   	<style name="vr_text" keep="true" distorted="true" enabled="false" capture="false" alpha="0" ty="75" depth="2000"  />
   
   	<action name="loadscene_vr">
      	vr_menu_setvisibility(true);

      	for(set(i,0), i LT scene.count, inc(i),
			txtadd(hotspotname, "p", get(i));
			addHotspot(get(hotspotname));
			mul(hotspot[get(hotspotname)].ath, get(i), 20);
			hotspot[get(hotspotname)].loadstyle(vr_panel);

			txtadd(hotspotthumb, get(hotspotname), "_thumb");
			addHotspot(get(hotspotthumb));
			set(hotspot[get(hotspotthumb)].url, get(scene[get(i)].thumburl));
			txtadd(hotspot[get(hotspotthumb)].onclick, "end_vr(loadscene(", get(scene[get(i)].name), "););");
			hotspot[get(hotspotthumb)].loadstyle(vr_thumb);
			mul(hotspot[get(hotspotthumb)].ath, get(i), 20);
			
			set(hotspot[get(hotspotthumb)].width, 240);
			set(hotspot[get(hotspotthumb)].height, 240);
			set(hotspot[get(hotspotthumb)].zorder, 3);
			set(hotspot[get(hotspotthumb)].ox, 0);
			set(hotspot[get(hotspotthumb)].oy, -10);

			txtadd(hotspottxt, get(hotspotname), "_txt");
			addHotspot(get(hotspottxt));

			txtadd(hotspot[get(hotspottxt)].url, "/?api-text_img.htm&amp;text=", get(scene[get(i)].title));
			txtadd(hotspot[get(hotspottxt)].onclick, "end_vr(loadscene(", get(scene[get(i)].name), "););");
			hotspot[get(hotspottxt)].loadstyle(vr_text);
			mul(hotspot[get(hotspottxt)].ath, get(i), 20);
			
			set(hotspot[get(hotspottxt)].width, 240);
			set(hotspot[get(hotspottxt)].height, 36);
			set(hotspot[get(hotspottxt)].zorder, 4);
			set(hotspot[get(hotspottxt)].ox, 0);
			set(hotspot[get(hotspottxt)].oy, 102); 

			                   
			if(i LT 18,
				set(hotspot[get(hotspotname)].atv, 0);
				set(hotspot[get(hotspotthumb)].atv, 0.5);
				set(hotspot[get(hotspottxt)].atv, 0);
			);

			if(i GT 17 AND i LT 36,
				set(hotspot[get(hotspotname)].atv, 20);
				set(hotspot[get(hotspotthumb)].atv, 20.5);
				set(hotspot[get(hotspottxt)].atv, 20);
			);

			if(i GT 35 AND i LT 54,
				set(hotspot[get(hotspotname)].atv, 40);
				set(hotspot[get(hotspotthumb)].atv, 40.5);
				set(hotspot[get(hotspottxt)].atv, 40);
			);

			if(i GT 53,
				set(hotspot[get(hotspotname)].visible, false);
				set(hotspot[get(hotspotthumb)].visible, false);
				set(hotspot[get(hotspottxt)].visible, false);
			);
			
      	);
   	</action>

   	<action name="nextscene_loop">
      	if(xml.scene != null AND scene.count GT 1,
			add(newsceneindex, scene[get(xml.scene)].index, %1);
			sub(lastsceneindex, scene.count, 1);
			if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
			if(newsceneindex GT lastsceneindex, set(newsceneindex,0));
			loadscene(get(scene[get(newsceneindex)].name));
        );
   	</action>
</krpano>